#!/usr/bin/env python3
from os import listdir,makedirs,unlink
from os.path import sep as psep,exists,isdir,abspath,dirname
from sys import exit,argv,stderr
from pprint import pprint
from subprocess import check_call,Popen,DEVNULL,PIPE,CalledProcessError,check_output
from time import sleep
from pylib.list_utils import equalize_lists

SYS_HWMON_PATH="/sys/class/hwmon"
BACKUP_DIR_PATH_PREFIX="/tmp/.pyfancontrol_"
restore_list=[]

def parse_args():
    from argparse import ArgumentParser
    ap=ArgumentParser()
    ap.add_argument("--pwm-range",nargs=2,type=int,default=[30,101])
    ap.add_argument("--max-in1",type=int,default=3000)
    ap.add_argument("--min-in1",type=int,default=500)
    ap.add_argument("--max-in1-fn",default=None,nargs="?")
    ap.add_argument("--min-in1-fn",default=None,nargs="?")
    ap.add_argument("--max-in0-fns",default=None,nargs="*")
    ap.add_argument("--min-in0-fns",default=None,nargs="*")
    ap.add_argument("--max-in0s",nargs="*",type=int,default=[80000])
    ap.add_argument("--min-in0s",nargs="*",type=int,default=[5000])
    ap.add_argument("--interval",type=float,default=1)
    ap.add_argument("--heat-cap",type=float,default=1)
    ap.add_argument("--fan-mass",type=float,default=1)
    ap.add_argument("-p",type=float,default=0.005)
    ap.add_argument(dest="target_temp",nargs=1,type=float)
    ap.add_argument("--in0",default=["nouveau","temp1_input"] , nargs='+' )
    ap.add_argument("--in1",default=["nouveau","fan1_input"]  ,nargs=2)
    ap.add_argument("--pwm",default=["nouveau","pwm1"]        ,nargs=2)
    ap.add_argument("-s","--sudo",action="store_true",default=False)
    ap.add_argument("--test",action="store_true",default=False)
    ap.add_argument("--dry-run",action="store_true",default=False)
    ap.add_argument("-v","--verbose",action="store_true",default=False)
    global args
    args=ap.parse_args()
    global TARGET_TEMP
    global HWMON_NAME
    global BACKUP_DIR_PATH
    global PWM_RANGE
    global HEAT_CAP
    global INTERVAL
    global P
    global EXTRA_SET_FILES
    EXTRA_SET_FILES=[]
    global IN0
    global IN1
    global PWM
    if len(args.in0) < 2:
        raise Exception(""""ERROR: need at least 2 args for --in1.
                first one is hwmon-name second is sensor-file.""")
    TARGET_TEMP=args.target_temp[0]
    PWM_RANGE=range(args.pwm_range[0],args.pwm_range[-1]+1)
    HEAT_CAP=args.heat_cap
    INTERVAL=args.interval
    P=args.p
    BACKUP_DIR_PATH=BACKUP_DIR_PATH_PREFIX+args.in1[0]
    IN0=args.in0
    IN1=args.in1
    PWM=args.pwm
    global MIN_IN1
    global MAX_IN1
    MIN_IN1=args.min_in1
    MAX_IN1=args.max_in1

    EXTRA_SET_FILES.append((args.pwm[0],args.pwm[1]+"_min",PWM_RANGE[0],"min_pwm"))
    EXTRA_SET_FILES.append((args.pwm[0],args.pwm[1]+"_max",PWM_RANGE[-1],"max_pwm"))

    EXTRA_SET_FILES.append((args.in1[0],args.min_in1_fn,args.min_in1,"min_in1"))
    EXTRA_SET_FILES.append((args.in1[0],args.max_in1_fn,args.max_in1,"max_in1"))

    EXTRA_SET_FILES.append((args.in0[0],args.min_in0_fns,args.min_in0s,"min_in0s"))
    EXTRA_SET_FILES.append((args.in0[0],args.max_in0_fns,args.max_in0s,"max_in0s"))

def get_controlfiles():
    control_files  =   { 
                            "in0" :  {
                                        "hwmon_name" : IN0[0],
                                        "filenames"   : IN0[1:],   
                                    },
                            "in1" :  {
                                        "hwmon_name" : IN1[0],
                                        "filename"   : IN1[1],
                                    },
                            "out" : {
                                        "hwmon_name" : PWM[0],
                                        "filename"   : PWM[1],
                                    },
                            "enable" :  {
                                            "hwmon_name" : PWM[0],
                                            "filename"   : PWM[1]+"_enable",
                                        },
                        }
    #---------------------------#
    #  add the extra set files  #
    #---------------------------#
    i=0
    for extra_thing in EXTRA_SET_FILES:
        hwmon_names,filenames,values,names = extra_thing
        if not type(hwmon_names) is list:
            hwmon_names=[hwmon_names]
        if not type(filenames) is list:
            filenames=[filenames]
        if not type(values) is list:
            values=[values]
        if not type(names) is list:
            names=[names]
        lists=equalize_lists([hwmon_names,filenames,values,names])
        for j in range(len(lists[1])):
            d = { "extra_set_file_" + names[j] +"_"+ str(j) :    {
                                                                "hwmon_name": hwmon_names[j] ,
                                                                "filename": filenames[j],
                                                                "value" : values[j],
                                                                }
                }
            control_files.update(d)
        i+=1

    #--------------------------------------#
    #   check all the files for existence  #
    #   and store their path(es)           #
    #--------------------------------------#
    for k in control_files.keys():
        control_files[k].update({"path": None})
    hwmon_subdirs=listdir(SYS_HWMON_PATH)
    hwmon_path=None
    for sdir in hwmon_subdirs:
        check_hwmon_path = SYS_HWMON_PATH + psep + sdir
        with open(check_hwmon_path+psep +"name") as f:
            name=f.read().strip()
            for k,v in control_files.copy().items():
                if name==v['hwmon_name']:
                    if 'filename' in v.keys():
                        if not v["filename"] is None:
                            check_path = check_hwmon_path+psep+v["filename"]
                            if args.verbose:
                                print('checking path: "{}" '.format(check_path),end="")
                            if exists(check_path):
                                if args.verbose:
                                    print("ok")
                                control_files[k]["path"] = check_path
                            else:
                                print("not existing")
                        elif args.verbose:
                            print("note: no filename supplied for \"{}\"".format(k))
                    else:
                        if len(v["filenames"]) > 0:
                            checked_pathes=[]
                            for fn in v["filenames"]:
                                check_path = check_hwmon_path+psep+fn
                                if args.verbose:
                                    print('checking path: "{}" '.format(check_path),end="")
                                if exists(check_path):
                                    if args.verbose:
                                        print("ok")
                                    checked_pathes.append(check_path)
                                else:
                                    print("not existing")
                            control_files[k].update({"pathes": checked_pathes})
                            control_files[k].pop("path")
                        elif args.verbose:
                            print("note: no filenames supplied for \"{}\"".format(k))
    return control_files

def sudo_write_to_file(data,filep):
    cmd=["sudo","dd","of="+filep,"status=none"]
    if args.dry_run:
        print("dry run write to file \"{}\", data=\"{}\"".format(filep,data))
        cmd=["echo"]+cmd
    elif args.verbose:
        print('writing to file="{}", data="{}"'.format(filep,data))
    p=Popen(cmd,stdin=PIPE)
    p.communicate(input=data)
    p.wait()
    if not p.returncode==0:
        raise CalledProcessError(p.returncode,cmd)

def write_to_file(data,filep):
    if not args.dry_run:
        if args.verbose:
            print("writing \"{}\"to file: \"{}\"".format(data,filep))
        with open(filep,mode="wb") as f:
            try:
                f.write(data)
            except OSError:
                raise Exception("ERROR: could not write to file.\nfilepath={}".format(filep))
    else:
        print("dry run write to file \"{}\", data=\"{}\"".format(filep,data))

def sudo_read_from_file(filep):
    cmd=["sudo","cat",filep]
    outp=check_output(cmd)
    return outp

def read_from_file(filep):
    with open(filep,'rb') as f:
        return f.read()

def prepare_backup_dir_path():
    if not args.dry_run:
        if args.verbose:
            print('preparing backup dirs, makedirs: {}'.format(BACKUP_DIR_PATH))
        makedirs(BACKUP_DIR_PATH,exist_ok=True)
    else:
        print("dry run makedirs: {}".format(BACKUP_DIR_PATH))
    if not isdir(BACKUP_DIR_PATH):
        raise Exception("ERROR: backup dir path \""+BACKUP_DIR_PATH+"\" exists and is not a directory.")

def backup_file(filep,keep_existing=True):
    prepare_backup_dir_path()
    backuppath=abspath(BACKUP_DIR_PATH)+abspath(filep)
    data=read_from_file(filep)
    dn=dirname(backuppath)
    if not args.dry_run:
        if args.verbose:
            print('makedirs "{}"'.format(dn))
        makedirs(dn,exist_ok=True)
    else:
        print("dry run makedirs: {}".format(dn))
    if isdir(backuppath):
        raise Exception("ERROR: backup path \""+backuppath+"\" exists and is a directory.")
    if not keep_existing or (keep_existing and not exists(backuppath)):
        if not args.dry_run:
            if args.verbose:
                print('writing backupfile "{}"'.format(backuppath))
            with open(backuppath,mode="wb") as f:
                f.write(data)
                restore_list.append(backuppath)
        else:
            print('dry run backup file, would write to "{}".'.format(backuppath))

def restore_file(filep):
    if filep is None:
        return
    backuppath=abspath(BACKUP_DIR_PATH)+abspath(filep)
    with open(backuppath,mode="rb") as f:
        data=f.read()
    write_to_file(data,filep)
    if not args.dry_run:
        if args.verbose:
            print("unlinking {}".format(backuppath))
        unlink(backuppath)
    else:
        print('dry run restore file, would delete "{}".'.format(backuppath))

def value2file(value_name,control_files):
    data=control_files[value_name]
    if "path" in data.keys():
        p=data["path"]
        if p is None:
            return
        backup_file(p)
        write_to_file(str(data['value']).encode(),p)
    else:
        raise Exception("ERROR: no single path in data found,value name = {}, data:\n{}".format(value_name,data))

def enable_control(control_files):
    for k in control_files.keys():
        if k[:14]=="extra_set_file":
            value2file(k,control_files)
    backup_file(control_files["enable"]["path"])
    write_to_file(b"1",control_files["enable"]["path"])

def disable_control(control_files):
    for fp in restore_list:
        restore_file(fp)

def get_temp():
    in0=control_files["in0"]
    if "path" in in0:
        return int(read_from_file(control_files["in0"]["path"]))/1000
    else:
        pathes=in0["pathes"]
        avg=[]
        for p in pathes:
            avg.append(int(read_from_file(p))/1000)
        avg=sum(avg)/len(avg)
        return avg

def set_pwm(val,pwm_cache):
    if not pwm_cache is None and abs(val-pwm_cache) < 0.001:
        return
    min_pwm=PWM_RANGE[0]
    max_pwm=PWM_RANGE[-1]
    print("pwm_range={}".format(PWM_RANGE))
    print("min_pwm,max_pwm,value={}, {}, {}".format(min_pwm,max_pwm,val))
    pwm_val=min_pwm+round((max_pwm-min_pwm)*val)
    write_to_file(str(pwm_val).encode(),control_files["out"]["path"])

def get_fan_speed():
    return int(read_from_file(control_files["in1"]["path"]))

def get_fan_energy():
    return FAN_MASS*get_fan_speed()**2

def get_heat():
    return get_temp() * HEAT_CAP

def eval_table(table_pwm):
    itemsum=1
    val=pwm
    backrange=min(5,len(table_pwm))
    for i in range(backrange):
        boost = table_pwm[-i][0]*(backrange-i)
        itemsum += boost
        val+= table_pwm[-i][1] * boost
    return val/itemsum
    
def control_loop():
    global pwm
    global deltazerocount
    pwm=0.5
    pwm_cache=None
    #deltazerocount=0
    #table_pwm=[]
    while True:
        fan_speed=get_fan_speed()
        temp=get_temp()
        if args.verbose:
            print("temp={}".format(temp))
        delta=temp-TARGET_TEMP
        if delta != 0 or fan_speed < MIN_IN1 or fan_speed > MAX_IN1:
            print("delta temp = "+str(delta))

            ## update table
            #if deltazerocount > 0:
            #    table_pwm+=[(deltazerocount,pwm)]
            #    pprint(table_pwm)
            #deltazerocount=0
           
            if MIN_IN1 < fan_speed < MAX_IN1:
                adj=P*delta**3
                print("pwm,delta*P",round(pwm,3),round(adj,3))
                pwm+=adj
                #old_pwm=pwm
                #pwm=(2*pwm+eval_table(table_pwm))/3
                #print("pwm,d_et   ",round(old_pwm,3),round(pwm-old_pwm,3))
            elif fan_speed < MIN_IN1:
                pwm+=P
            else:
                pwm-=P
            
            pwm=min(max(pwm,0),1)
            set_pwm(pwm,pwm_cache)
            pwm_cache=pwm
            #print("fan_energy = "+str(int(fan_energy/1000)))
            #print("temp       = "+str(temp))
        else:
            print("temp ok")
            #deltazerocount+=1
        sleep(INTERVAL)
        print()

if __name__=="__main__":
    parse_args()
    if args.sudo:
        read_from_file=sudo_read_from_file
        write_to_file=sudo_write_to_file
    control_files=get_controlfiles()
    if args.verbose:
        from pprint import pprint
        pprint(control_files)
    enable_control(control_files)
    try:
        control_loop()
    finally:
        disable_control(control_files)


# vim: set syntax=python foldmethod=indent foldlevel=0 foldnestmax=1 :
